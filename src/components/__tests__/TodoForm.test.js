import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import TodoForm from "../TodoForm";

describe("TodoForm", () => {
  let mockAddTodo;

  beforeEach(() => {
    mockAddTodo = jest.fn();
  });

  // —Ä–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã
  test("should render form with input and button", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    expect(screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...")).toBeInTheDocument();
    expect(screen.getByText("–î–æ–±–∞–≤–∏—Ç—å")).toBeInTheDocument();
  });

  // –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ
  test("should update input value when typing", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    fireEvent.change(input, { target: { value: "New task" } });
    
    expect(input.value).toBe("New task");
  });

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
  test("should call addTodo and clear input when submitting valid text", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const button = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    
    fireEvent.change(input, { target: { value: "New task" } });
    fireEvent.click(button);
    
    expect(mockAddTodo).toHaveBeenCalledWith("New task");
    expect(input.value).toBe("");
  });

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
  test("should not call addTodo when submitting empty text", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const button = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    fireEvent.click(button);
    
    expect(mockAddTodo).not.toHaveBeenCalled();
  });

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
  test("should not call addTodo when submitting whitespace only", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const button = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    
    fireEvent.change(input, { target: { value: "   " } });
    fireEvent.click(button);
    
    expect(mockAddTodo).not.toHaveBeenCalled();
  });

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ Enter
  test("should submit form when pressing Enter", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const form = input.closest('form');
    
    fireEvent.change(input, { target: { value: "New task" } });
    fireEvent.submit(form);
    
    expect(mockAddTodo).toHaveBeenCalledWith("New task");
    expect(input.value).toBe("");
  });

  // –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ Enter
  test("should not submit empty form when pressing Enter", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const form = input.closest('form');
    
    fireEvent.submit(form);
    
    expect(mockAddTodo).not.toHaveBeenCalled();
  });

  // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
  test("should handle multiple submissions correctly", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const button = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    
    fireEvent.change(input, { target: { value: "First task" } });
    fireEvent.click(button);
    
    fireEvent.change(input, { target: { value: "Second task" } });
    fireEvent.click(button);
    
    expect(mockAddTodo).toHaveBeenCalledTimes(2);
    expect(mockAddTodo).toHaveBeenNthCalledWith(1, "First task");
    expect(mockAddTodo).toHaveBeenNthCalledWith(2, "Second task");
  });

  // —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–∫–∏
  test("should apply correct button styles", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const button = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    expect(button).toHaveClass("bg-blue-500", "hover:bg-blue-700", "text-white");
  });

  // —Å—Ç–∏–ª–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
  test("should apply correct input styles", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    expect(input).toHaveClass("border", "border-gray-300", "rounded");
  });

  // –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  test("should clear form after adding todo", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const addButton = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    
    fireEvent.change(input, { target: { value: "Test task" } });
    fireEvent.click(addButton);
    
    expect(input.value).toBe("");
  });

  // –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  test("should handle very long text input", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const addButton = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    
    const longText = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ñ–æ—Ä–º–æ–π. –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–º, —á—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.";
    
    fireEvent.change(input, { target: { value: longText } });
    fireEvent.click(addButton);
    
    expect(mockAddTodo).toHaveBeenCalledWith(longText);
  });

  // —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  test("should handle special characters in input", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const addButton = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    
    const specialText = "–ó–∞–¥–∞—á–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏: !@#$%^&*()_+-=[]{}|;':\",./<>?`~ –∏ —ç–º–æ–¥–∑–∏ üòÄüéâüöÄ";
    
    fireEvent.change(input, { target: { value: specialText } });
    fireEvent.click(addButton);
    
    expect(mockAddTodo).toHaveBeenCalledWith(specialText);
  });

  // HTML –≤ —Ç–µ–∫—Å—Ç–µ
  test("should handle HTML-like text safely", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const addButton = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    
    const htmlText = "<script>alert('test')</script><div>Hello</div>";
    
    fireEvent.change(input, { target: { value: htmlText } });
    fireEvent.click(addButton);
    
    expect(mockAddTodo).toHaveBeenCalledWith(htmlText);
  });

  // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
  test("should handle multiple spaces correctly", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const addButton = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    
    fireEvent.change(input, { target: { value: "   Task with spaces   " } });
    fireEvent.click(addButton);
    
    expect(mockAddTodo).toHaveBeenCalledWith("   Task with spaces   ");
  });

  // —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
  test("should not add todo with only spaces", () => {
    render(<TodoForm addTodo={mockAddTodo} />);
    
    const input = screen.getByPlaceholderText("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...");
    const addButton = screen.getByText("–î–æ–±–∞–≤–∏—Ç—å");
    
    fireEvent.change(input, { target: { value: "   " } });
    fireEvent.click(addButton);
    
    expect(mockAddTodo).not.toHaveBeenCalled();
  });
}); 